{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e09d1349-65f6-4832-856a-d7d3e497706c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# lambda_function.py\n",
    "import boto3\n",
    "import requests\n",
    "import datetime as dt\n",
    "import os\n",
    "import pandas as pd\n",
    "import unicodedata\n",
    "\n",
    "s3 = boto3.client(\"s3\")\n",
    "\n",
    "# --- Comunidades a recorrer SIEMPRE ---\n",
    "geo_dict = {\n",
    "    4:\"Andalucía\", 5:\"Aragón\", 6:\"Cantabria\", 7:\"Castilla la Mancha\",\n",
    "    8:\"Castilla y León\", 9:\"Cataluña\", 10:\"País Vasco\",\n",
    "    11:\"Principado de Asturias\", 8744:\"Comunidad de Ceuta\",\n",
    "    8745:\"Comunidad de Melilla\", 13:\"Comunidad de Madrid\",\n",
    "    14:\"Comunidad de Navarra\", 15:\"Comunidad Valenciana\",\n",
    "    16:\"Extremadura\", 17:\"Galicia\", 8743:\"Islas Baleares\",\n",
    "    8742:\"Islas Canarias\", 20:\"La Rioja\", 21:\"Región de Murcia\"\n",
    "}\n",
    "lista_de_geo_ids = list(geo_dict.keys())\n",
    "\n",
    "BASE_URL = \"https://apidatos.ree.es/es/datos/demanda/evolucion\"\n",
    "\n",
    "def slug(txt: str) -> str:\n",
    "    # \"Castilla y León\" -> \"castilla_y_leon\"\n",
    "    s = unicodedata.normalize(\"NFKD\", txt).encode(\"ascii\", \"ignore\").decode(\"ascii\")\n",
    "    return s.replace(\" \", \"_\").lower()\n",
    "\n",
    "def get_date(event: dict | None) -> dt.date:\n",
    "    # Si te pasan {\"target_date\":\"YYYY-MM-DD\"} la usas; si no, HOY (sin zonas)\n",
    "    if event and isinstance(event, dict) and \"target_date\" in event:\n",
    "        return dt.date.fromisoformat(str(event[\"target_date\"]))\n",
    "    return dt.date.today()\n",
    "\n",
    "def lambda_handler(event, context):\n",
    "    # 1) Fecha objetivo\n",
    "    dia = get_date(event)\n",
    "    y, m, d = dia.strftime(\"%Y\"), dia.strftime(\"%m\"), dia.strftime(\"%d\")\n",
    "    start_date = f\"{y}-{m}-{d}T00:00\"\n",
    "    end_date   = f\"{y}-{m}-{d}T23:59\"\n",
    "\n",
    "    # 2) Bucket y prefijo\n",
    "    bucket_name = os.environ[\"BUCKET_NAME\"]  # p.ej. \"proyectohabree\"\n",
    "    base_prefix = f\"raw/ree/demanda-ccaa/y={y}/m={m}/d={d}/\"\n",
    "\n",
    "    # 3) Recorre TODAS las CCAA y sube 1 CSV por cada una (aunque esté vacío)\n",
    "    for geo_id in lista_de_geo_ids:\n",
    "        comunidad = geo_dict[geo_id]\n",
    "        nombre_ccaa = slug(comunidad)\n",
    "\n",
    "        params = {\n",
    "            \"start_date\": start_date,\n",
    "            \"end_date\": end_date,\n",
    "            \"time_trunc\": \"day\",\n",
    "            \"geo_trunc\": \"electric_system\",\n",
    "            \"geo_limit\": \"ccaa\",\n",
    "            \"geo_ids\": geo_id\n",
    "        }\n",
    "\n",
    "        try:\n",
    "            r = requests.get(BASE_URL, params=params, timeout=20)\n",
    "            r.raise_for_status()\n",
    "            data = r.json()\n",
    "            values = (data.get(\"included\", [{}])[0]\n",
    "                        .get(\"attributes\", {})\n",
    "                        .get(\"values\", []))\n",
    "        except Exception:\n",
    "            values = []  # si falla la API, subimos CSV vacío con cabeceras\n",
    "\n",
    "        registros = [\n",
    "            {\"datetime\": v.get(\"datetime\"),\n",
    "             \"value\": v.get(\"value\"),\n",
    "             \"geo_id\": geo_id,\n",
    "             \"comunidad\": comunidad}\n",
    "            for v in values\n",
    "        ]\n",
    "\n",
    "        df = pd.DataFrame(registros, columns=[\"datetime\",\"value\",\"geo_id\",\"comunidad\"])\n",
    "\n",
    "        local_path = f\"/tmp/{nombre_ccaa}.csv\"\n",
    "        s3_key = f\"{base_prefix}ccaa={nombre_ccaa}/{nombre_ccaa}.csv\"\n",
    "\n",
    "        df.to_csv(local_path, index=False, encoding=\"utf-8\")\n",
    "        s3.upload_file(local_path, bucket_name, s3_key)\n",
    "\n",
    "    return {\"statusCode\": 200, \"body\": f\"OK {y}-{m}-{d} (todas las CCAA)\"}"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
